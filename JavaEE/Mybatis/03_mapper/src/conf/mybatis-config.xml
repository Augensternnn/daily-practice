<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE configuration
        PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-config.dtd">
<configuration>
    <!--【这些标签编译时是有顺序的，不能想怎么写就怎么写】-->
    <!--
        1.mybatis可以使用properties来引入外部properties配置文件的内容
          两个属性：resource、url
            resource：引入类路径下的资源
            url：引入网络路径或磁盘路径下的资源
    -->
    <properties resource="conf/dbconfig.properties"></properties>

    <!--
        2.settings包含很多重要的设置项
          setting：用来设置每一个设置项
            name：设置项名
            value：设置项取值
    -->
    <!--<settings>
        <setting name="mapUnderscoreToCamelCase" value="true"/>&lt;!&ndash;驼峰式命名法&ndash;&gt;
    </settings>-->

    <!--
        3.typeAliases：别名处理器；可以给java类型起别名
            别名不区分大小写
        【写全类名可以快速定位到那个类，建议】
    -->
    <typeAliases>
        <!--
            3.1 typeAlias：给某个java类型起别名
                    type：指定要起别名的类型全类名；默认别名就是类名小写，employee
                    alias：指定新的别名
        -->
        <!--<typeAlias type="bean.Employee" alias="emp"/>-->

        <!--3.2 批量起别名
                    package：为某个包下的所有类批量起别名
                        name：指定包名(为当前包以及下面所有的后代包的每一个类都起一个默认别名(类名小写))
        -->

        <!--3.3 批量起别名的情况下，使用@Alias()注解为某个类型指定新的别名-->
        <package name="bean"/>
    </typeAliases>

    <!--4.environments：环境们，mybatis可以配置多种环境；
          default：指定使用某种环境，可以达到快速切换环境
            environment：配置一个具体的环境信息；transactionManager、dataSource两个标签必须有
                id：当前环境的唯一标识

                transactionManager：事务管理器
                    type：事务管理器的类型；
                        JDBC：JdbcTransactionFactory
                        MANAGED：ManagedTransactionFactory
                        自定义事务管理器：实现TransactionFactory接口，type指定为全类名

                dataSource：数据源
                    type：数据源类型
                        UNPOOLED：不使用连接池；UnpooledDataSourceFactory
                        POOLED：使用连接池技术；PooledDataSourceFactory
                        JNDI：使用JNDI技术；JndiDataSourceFactory
                        自定义数据源：实现DataSourceFactory接口，type是自定义数据源全类名
    -->
    <environments default="development">
        <environment id="development">
            <transactionManager type="JDBC"/>
            <dataSource type="POOLED">
                <property name="driver" value="${jdbc.driver}"/>
                <property name="url" value="${jdbc.url}"/>
                <property name="username" value="${jdbc.username}"/>
                <property name="password" value="${jdbc.password}"/>
            </dataSource>
        </environment>
    </environments>

    <!--5.databaseIdProvider：支持多数据库厂商
            type="DB_VENDOR"：VendorDatabaseIdProvider
                作用：得到数据库厂商的标识(驱动自带的，getDatabaseProductName()：拿到当前数据库产品的标识)，mybatis就能根据数据库厂商标识来执行不同的sql
                    标识：MySQL、Oracle、SQL Server...
    -->
    <databaseIdProvider type="DB_VENDOR">
        <!--为不同的数据库厂商起别名-->
        <property name="MySQL" value="mysql"/>
        <property name="Oracle" value="oracle"/>
        <property name="SQL Server" value="sqlserver"/>
    </databaseIdProvider>

    <!--将写好的sql映射文件一定要注册到全局配置文件中
        sql映射文件：EmployeeMapper.xml
        全局配置文件：mybatis-config.xml
    -->
    <!--6.mappers：将sql映射注册到全局配置文件中-->
    <mappers>
        <!--mapper：注册一个sql映射
                【注册配置文件】
                resource：引用类路径下的sql映射文件
                    conf/mapper/EmployeeMapper.xml
                url：引用 网络路径或磁盘路径 下的sql映射文件
                    file:///var/mappers/AuthorMapper.xml
                【注册接口】
                 class：引用（注册）接口
                    1.sql映射文件：映射文件名必须和接口同名，并且与接口放在同一目录下：<mapper class="dao.EmployeeMapper"/>
                    2.没有sql映射文件：所有的sql都是利用注解写在接口上
                    【推荐】比较重要的、复杂的Dao接口：写sql映射文件；
                            不重要的、简单的Dao接口：为了开发快速，可以使用注解
        -->
<!--        <mapper resource="conf/mapper/EmployeeMapper.xml"/>-->
<!--        <mapper class="dao.EmployeeMapperAnnotation"/>-->

        <!--批量注册：package
            name：包名[基于注解的能找到；其他接口(写了映射文件的)找不到，需要将映射文件、接口放在同一目录下]
        -->
        <package name="dao"/>
    </mappers>
</configuration>